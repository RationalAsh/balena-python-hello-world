# base-image for python on any machine using a template variable,
# see more about dockerfile templates here: https://www.balena.io/docs/learn/develop/dockerfile/
FROM balenalib/%%BALENA_MACHINE_NAME%%-python:3.9-buster-build

# use `install_packages` if you need to install dependencies,
# for instance if you need git, just uncomment the line below.
#RUN install_packages git python3-rpi.gpio python3-spidev python3-pip python3-pil python3-numpy

RUN install_packages cmake dbus stlink-tools wget nginx nginx-light

# Set our working directory
WORKDIR /usr/src/app

# Copy requirements.txt first for better cache on later pushes
COPY requirements.txt requirements.txt

# pip install python deps from requirements.txt on the resin.io build server
RUN pip install -r requirements.txt

# Install some more packages - preparation for installing OpenOCD
RUN install_packages git autoconf libtool make pkg-config libusb-1.0-0 libusb-1.0-0-dev

# Clone OpenOCD from git
RUN git clone https://github.com/openocd-org/openocd.git

# This will copy all files in our root to the working  directory in the container
COPY . ./

# Enable udevd so that plugged dynamic hardware devices show up in our container.
ENV UDEV=1

# Copy the build directory to /var/www/html/static
COPY build /var/www/html/static

# Copy over the nginx configuration file for nginx
COPY nginx.conf /etc/nginx/nginx.conf

# Make the disable_serial_tty.sh script executable
RUN chmod +x start.sh

# Now we go into the OpenOCD directory to build and install it
WORKDIR /usr/src/app/openocd

# Run the bootstrap script
RUN ./bootstrap

# Run the configure script
RUN ./configure --enable-sysfsgpio --enable-bcm2835gpio

# Run the make script
RUN make

# Run the make install script
RUN make install

# Set the working directory back to the app
WORKDIR /usr/src/app

# main.py will run when container starts up on the device
# CMD ["python","-u","main.py"]
CMD ["./start.sh"]